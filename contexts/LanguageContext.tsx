import React, { createContext, useContext, useState, ReactNode } from 'react';
import { Language, LanguageContextType } from '../types';

const translations = {
  en: {
    // App titles
    'app.name': 'Tagda Fun',
    'app.tagline': 'Your Fun Random Generator',
    
    // Tab labels
    'tab.number': 'ЁЯО▓ Number',
    'tab.names': 'ЁЯСе Names',
    
    // Number generator
    'number.title': 'ЁЯО▓ Number Generator',
    'number.subtitle': 'Generate random numbers within your custom range',
    'number.setRange': 'Set Your Range',
    'number.minimum': 'Minimum',
    'number.maximum': 'Maximum',
    'number.generate': 'Generate Number',
    'number.generating': 'Generating...',
    'number.reset': 'Reset to Default (1-100)',
    'number.result.title': 'Your lucky number!',
    'number.result.badge': 'Range: {min} - {max}',
    
    // Name picker
    'names.title': 'ЁЯСе Name Picker',
    'names.subtitle': 'Randomly select from a list of names',
    'names.enterNames': 'Enter Names',
    'names.addName': 'Add Name',
    'names.removeName': 'Remove',
    'names.pickName': 'Pick a Name',
    'names.picking': 'Picking...',
    'names.clearAll': 'Clear All Names',
    'names.result.title': 'The chosen one!',
    'names.result.badge': 'From {count} names',
    'names.placeholder': 'Enter name here...',
    'names.validation.alphabets': 'Only alphabets allowed',
    'names.validation.minimum': 'Please add at least 2 names',
    'names.validation.empty': 'Please enter at least one name',
    
    // Common
    'button.add': 'Add',
    'button.remove': 'Remove',
    'button.clear': 'Clear',
    'button.close': 'Close',
    
    // Language
    'language.en': 'English',
    'language.hi': 'рд╣рд┐рдВрджреА',
    'language.switch': 'Switch Language',

    // Privacy
    'privacy.title': 'Privacy Policy',
    'privacy.intro': 'This app does not collect or store any personal information.',
    'privacy.section.dont': "What we don't do:",
    'privacy.dont.collect': 'Collect personal data',
    'privacy.dont.store': 'Store user information',
    'privacy.dont.track': 'Track your activity',
    'privacy.dont.share': 'Share data with third parties',
    'privacy.section.do': 'What we do:',
    'privacy.do.local': 'Generate random numbers locally',
    'privacy.do.simple': 'Provide a fun, simple experience',
    'privacy.do.respect': 'Respect your privacy',
    'privacy.footer': 'Your privacy is important to us. Enjoy the app!',
    
    // Validation messages
    'validation.error': 'Error',
    'validation.warning': 'Warning',
    'validation.info': 'Information',
    'validation.invalidInput': 'Invalid Input',
    'validation.invalidMin': 'Invalid Minimum',
    'validation.invalidMax': 'Invalid Maximum',
    'validation.invalidRange': 'Invalid Range',
    'validation.minValue': 'The minimum value must be at least 1. Please enter a higher number.',
    'validation.maxValue': 'The maximum value cannot exceed 100. Please enter a lower number.',
    'validation.rangeError': 'The minimum value must be less than the maximum value. Please adjust your range.',
    'validation.enterValidNumbers': 'Please enter valid numbers for both minimum and maximum values.',
    'validation.noNames': 'Please enter at least one name to pick from.',
    'validation.onlyOneName': 'Please enter at least two names to make the selection meaningful.',
    
    // Success messages
    'success.resetComplete': 'Reset Complete',
    'success.namesCleared': 'Names Cleared',
    'success.resetMessage': 'Your range has been reset to the default values (1-100).',
    'success.clearMessage': 'All names have been cleared. You can enter new names now.',
  },
  hi: {
    // App titles
    'app.name': 'рдЯрдЧрдбрд╝рд╛ рдлрди',
    'app.tagline': 'рдЖрдкрдХрд╛ рдордЬрд╝реЗрджрд╛рд░ рд░реИрдВрдбрдо рдЬрдирд░реЗрдЯрд░',
    
    // Tab labels
    'tab.number': 'ЁЯО▓ рдирдВрдмрд░',
    'tab.names': 'ЁЯСе рдирд╛рдо',
    
    // Number generator
    'number.title': 'ЁЯО▓ рдирдВрдмрд░ рдЬрдирд░реЗрдЯрд░',
    'number.subtitle': 'рдЕрдкрдиреА рдХрд╕реНрдЯрдо рд░реЗрдВрдЬ рдореЗрдВ рд░реИрдВрдбрдо рдирдВрдмрд░ рдЬрдирд░реЗрдЯ рдХрд░реЗрдВ',
    'number.setRange': 'рдЕрдкрдиреА рд░реЗрдВрдЬ рд╕реЗрдЯ рдХрд░реЗрдВ',
    'number.minimum': 'рдиреНрдпреВрдирддрдо',
    'number.maximum': 'рдЕрдзрд┐рдХрддрдо',
    'number.generate': 'рдирдВрдмрд░ рдЬрдирд░реЗрдЯ рдХрд░реЗрдВ',
    'number.generating': 'рдЬрдирд░реЗрдЯ рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
    'number.reset': 'рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдкрд░ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ (1-100)',
    'number.result.title': 'рдЖрдкрдХрд╛ рд▓рдХреА рдирдВрдмрд░!',
    'number.result.badge': 'рд░реЗрдВрдЬ: {min} - {max}',
    
    // Name picker
    'names.title': 'ЁЯСе рдирд╛рдо рдЪреБрдирдиреЗ рд╡рд╛рд▓рд╛',
    'names.subtitle': 'рдирд╛рдореЛрдВ рдХреА рд╕реВрдЪреА рд╕реЗ рд░реИрдВрдбрдо рдЪрдпрди рдХрд░реЗрдВ',
    'names.enterNames': 'рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ',
    'names.addName': 'рдирд╛рдо рдЬреЛрдбрд╝реЗрдВ',
    'names.removeName': 'рд╣рдЯрд╛рдПрдВ',
    'names.pickName': 'рдирд╛рдо рдЪреБрдиреЗрдВ',
    'names.picking': 'рдЪреБрди рд░рд╣рд╛ рд╣реИ...',
    'names.clearAll': 'рд╕рднреА рдирд╛рдо рд╕рд╛рдлрд╝ рдХрд░реЗрдВ',
    'names.result.title': 'рдЪреБрдирд╛ рдЧрдпрд╛ рдирд╛рдо!',
    'names.result.badge': '{count} рдирд╛рдореЛрдВ рдореЗрдВ рд╕реЗ',
    'names.placeholder': 'рдпрд╣рд╛рдБ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ...',
    'names.validation.alphabets': 'рдХреЗрд╡рд▓ рдЕрдХреНрд╖рд░реЛрдВ рдХреА рдЕрдиреБрдорддрд┐ рд╣реИ',
    'names.validation.minimum': 'рдХреГрдкрдпрд╛ рдХрдо рд╕реЗ рдХрдо 2 рдирд╛рдо рдЬреЛрдбрд╝реЗрдВ',
    'names.validation.empty': 'рдХреГрдкрдпрд╛ рдХрдо рд╕реЗ рдХрдо рдПрдХ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ',
    
    // Common
    'button.add': 'рдЬреЛрдбрд╝реЗрдВ',
    'button.remove': 'рд╣рдЯрд╛рдПрдВ',
    'button.clear': 'рд╕рд╛рдлрд╝ рдХрд░реЗрдВ',
    'button.close': 'рдмрдВрдж рдХрд░реЗрдВ',
    
    // Language
    'language.en': 'English',
    'language.hi': 'рд╣рд┐рдВрджреА',
    'language.switch': 'рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ',

    // Privacy
    'privacy.title': 'рдЧреЛрдкрдиреАрдпрддрд╛ рдиреАрддрд┐',
    'privacy.intro': 'рдпрд╣ рдРрдк рдХрд┐рд╕реА рднреА рдкреНрд░рдХрд╛рд░ рдХреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА рдПрдХрддреНрд░ рдпрд╛ рд╕рдВрдЧреНрд░рд╣реАрдд рдирд╣реАрдВ рдХрд░рддрд╛ред',
    'privacy.section.dont': 'рд╣рдо рдХреНрдпрд╛ рдирд╣реАрдВ рдХрд░рддреЗ:',
    'privacy.dont.collect': 'рд╡реНрдпрдХреНрддрд┐рдЧрдд рдбреЗрдЯрд╛ рдПрдХрддреНрд░ рдХрд░рдирд╛',
    'privacy.dont.store': 'рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЬрд╛рдирдХрд╛рд░реА рд╕рдВрдЧреНрд░рд╣реАрдд рдХрд░рдирд╛',
    'privacy.dont.track': 'рдЖрдкрдХреА рдЧрддрд┐рд╡рд┐рдзрд┐ рдХреЛ рдЯреНрд░реИрдХ рдХрд░рдирд╛',
    'privacy.dont.share': 'рдерд░реНрдб-рдкрд╛рд░реНрдЯреА рдХреЗ рд╕рд╛рде рдбреЗрдЯрд╛ рд╕рд╛рдЭрд╛ рдХрд░рдирд╛',
    'privacy.section.do': 'рд╣рдо рдХреНрдпрд╛ рдХрд░рддреЗ рд╣реИрдВ:',
    'privacy.do.local': 'рд╕реНрдерд╛рдиреАрдп рд░реВрдк рд╕реЗ рд░реИрдВрдбрдо рдирдВрдмрд░ рдЬрдирд░реЗрдЯ рдХрд░рдирд╛',
    'privacy.do.simple': 'рдордЬрд╝реЗрджрд╛рд░ рдФрд░ рд╕рд░рд▓ рдЕрдиреБрднрд╡ рдкреНрд░рджрд╛рди рдХрд░рдирд╛',
    'privacy.do.respect': 'рдЖрдкрдХреА рдЧреЛрдкрдиреАрдпрддрд╛ рдХрд╛ рд╕рдореНрдорд╛рди рдХрд░рдирд╛',
    'privacy.footer': 'рдЖрдкрдХреА рдЧреЛрдкрдиреАрдпрддрд╛ рд╣рдорд╛рд░реЗ рд▓рд┐рдП рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред рдРрдк рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВ!',
    
    // Validation messages
    'validation.error': 'рддреНрд░реБрдЯрд┐',
    'validation.warning': 'рдЪреЗрддрд╛рд╡рдиреА',
    'validation.info': 'рдЬрд╛рдирдХрд╛рд░реА',
    'validation.invalidInput': 'рдЕрдорд╛рдиреНрдп рдЗрдирдкреБрдЯ',
    'validation.invalidMin': 'рдЕрдорд╛рдиреНрдп рдиреНрдпреВрдирддрдо',
    'validation.invalidMax': 'рдЕрдорд╛рдиреНрдп рдЕрдзрд┐рдХрддрдо',
    'validation.invalidRange': 'рдЕрдорд╛рдиреНрдп рд░реЗрдВрдЬ',
    'validation.minValue': 'рдиреНрдпреВрдирддрдо рдорд╛рди рдХрдо рд╕реЗ рдХрдо 1 рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред рдХреГрдкрдпрд╛ рдЙрдЪреНрдЪ рд╕рдВрдЦреНрдпрд╛ рджрд░реНрдЬ рдХрд░реЗрдВред',
    'validation.maxValue': 'рдЕрдзрд┐рдХрддрдо рдорд╛рди 100 рд╕реЗ рдЕрдзрд┐рдХ рдирд╣реАрдВ рд╣реЛ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рдХрдо рд╕рдВрдЦреНрдпрд╛ рджрд░реНрдЬ рдХрд░реЗрдВред',
    'validation.rangeError': 'рдиреНрдпреВрдирддрдо рдорд╛рди рдЕрдзрд┐рдХрддрдо рдорд╛рди рд╕реЗ рдХрдо рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред рдХреГрдкрдпрд╛ рдЕрдкрдиреА рд░реЗрдВрдЬ рд╕рдорд╛рдпреЛрдЬрд┐рдд рдХрд░реЗрдВред',
    'validation.enterValidNumbers': 'рдХреГрдкрдпрд╛ рдиреНрдпреВрдирддрдо рдФрд░ рдЕрдзрд┐рдХрддрдо рджреЛрдиреЛрдВ рдорд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рд╡реИрдз рд╕рдВрдЦреНрдпрд╛рдПрдВ рджрд░реНрдЬ рдХрд░реЗрдВред',
    'validation.noNames': 'рдЪреБрдирдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдХрдо рд╕реЗ рдХрдо рдПрдХ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВред',
    'validation.onlyOneName': 'рдХреГрдкрдпрд╛ рдЪрдпрди рдХреЛ рд╕рд╛рд░реНрдердХ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрдо рд╕реЗ рдХрдо рджреЛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВред',
    
    // Success messages
    'success.resetComplete': 'рд░реАрд╕реЗрдЯ рдкреВрд░рд╛',
    'success.namesCleared': 'рдирд╛рдо рд╕рд╛рдлрд╝ рдХрд┐рдП рдЧрдП',
    'success.resetMessage': 'рдЖрдкрдХреА рд░реЗрдВрдЬ рдХреЛ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдорд╛рдиреЛрдВ (1-100) рдкрд░ рд░реАрд╕реЗрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред',
    'success.clearMessage': 'рд╕рднреА рдирд╛рдо рд╕рд╛рдлрд╝ рдХрд░ рджрд┐рдП рдЧрдП рд╣реИрдВред рдЖрдк рдЕрдм рдирдП рдирд╛рдо рджрд░реНрдЬ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред',
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

interface LanguageProviderProps {
  children: ReactNode;
}

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('en');

  const t = (key: string): string => {
    const langTable: Record<string, any> = (translations as any)[language] || {};

    // 1) Try flat key lookup first
    if (Object.prototype.hasOwnProperty.call(langTable, key)) {
      const direct = langTable[key];
      return typeof direct === 'string' ? direct : key;
    }

    // 2) Fallback nested traversal
    const segments = key.split('.');
    let value: any = langTable;
    for (const segment of segments) {
      if (value && typeof value === 'object' && Object.prototype.hasOwnProperty.call(value, segment)) {
        value = value[segment];
      } else {
        return key;
      }
    }
    return typeof value === 'string' ? value : key;
  };

  const value: LanguageContextType = {
    language,
    setLanguage,
    t
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};
