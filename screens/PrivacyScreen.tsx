import React from 'react';
import { View, StyleSheet, ScrollView, Text, TouchableOpacity } from 'react-native';
import { SafeAreaView, useSafeAreaInsets } from 'react-native-safe-area-context';
import { PrivacyScreenProps } from '../types';
import { COLORS, TYPOGRAPHY } from '../constants/theme';
import { useLanguage } from '../contexts/LanguageContext';
import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';

const PrivacyScreen: React.FC<PrivacyScreenProps> = () => {
  const insets = useSafeAreaInsets();
  const { language } = useLanguage();
  
  const t = (key: string) => {
    const translations = {
      en: {
        title: 'Privacy Policy',
        subtitle: 'Your privacy is our priority',
        section1Title: 'Information We Collect',
        section1Text: 'Our app does not collect, store, or transmit any personal information. All data generated within the app (such as random numbers, names, or game results) is stored locally on your device and is not shared with us or any third parties.',
        section2Title: 'How We Use Information',
        section2Text: 'Since we don\'t collect personal information, we don\'t use any data for any purpose. The app functions entirely offline and locally on your device.',
        section3Title: 'Data Storage',
        section3Text: 'Any preferences, settings, or game statistics are stored locally on your device using secure local storage methods. This data remains private and under your control.',
        section4Title: 'Third-Party Services',
        section4Text: 'Our app does not integrate with any third-party services, analytics platforms, or advertising networks that could collect or track your information.',
        section5Title: 'Children\'s Privacy',
        section5Text: 'Our app is suitable for all ages and does not knowingly collect any personal information from children under 13 or any other age group.',
        section6Title: 'Changes to This Policy',
        section6Text: 'We may update this privacy policy from time to time. Any changes will be reflected in the app and users will be notified of significant updates.',
        section7Title: 'Contact Us',
        section7Text: 'If you have any questions about this privacy policy, please contact us through the app store or our support channels.',
        lastUpdated: 'Last updated: August 2025',
        privacyBadge: 'ЁЯФТ 100% Private',
        offlineBadge: 'ЁЯУ▒ Works Offline',
        localBadge: 'ЁЯТ╛ Local Storage Only'
      },
      hi: {
        title: 'рдЧреЛрдкрдиреАрдпрддрд╛ рдиреАрддрд┐',
        subtitle: 'рдЖрдкрдХреА рдЧреЛрдкрдиреАрдпрддрд╛ рд╣рдорд╛рд░реА рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рд╣реИ',
        section1Title: 'рдЬрд╛рдирдХрд╛рд░реА рдЬреЛ рд╣рдо рдПрдХрддреНрд░ рдХрд░рддреЗ рд╣реИрдВ',
        section1Text: 'рд╣рдорд╛рд░рд╛ рдРрдк рдХрд┐рд╕реА рднреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА рдХреЛ рдПрдХрддреНрд░, рд╕рдВрдЧреНрд░рд╣реАрдд рдпрд╛ рдкреНрд░рд╕рд╛рд░рд┐рдд рдирд╣реАрдВ рдХрд░рддрд╛ред рдРрдк рдХреЗ рднреАрддрд░ рдЙрддреНрдкрдиреНрди рд╕рднреА рдбреЗрдЯрд╛ (рдЬреИрд╕реЗ рдпрд╛рджреГрдЪреНрдЫрд┐рдХ рд╕рдВрдЦреНрдпрд╛рдПрдВ, рдирд╛рдо, рдпрд╛ рдЧреЗрдо рдкрд░рд┐рдгрд╛рдо) рдЖрдкрдХреЗ рдбрд┐рд╡рд╛рдЗрд╕ рдкрд░ рд╕реНрдерд╛рдиреАрдп рд░реВрдк рд╕реЗ рд╕рдВрдЧреНрд░рд╣реАрдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдФрд░ рд╣рдорд╛рд░реЗ рд╕рд╛рде рдпрд╛ рдХрд┐рд╕реА рддреГрддреАрдп рдкрдХреНрд╖ рдХреЗ рд╕рд╛рде рд╕рд╛рдЭрд╛ рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ред',
        section2Title: 'рд╣рдо рдЬрд╛рдирдХрд╛рд░реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреИрд╕реЗ рдХрд░рддреЗ рд╣реИрдВ',
        section2Text: 'рдЪреВрдВрдХрд┐ рд╣рдо рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА рдПрдХрддреНрд░ рдирд╣реАрдВ рдХрд░рддреЗ, рд╣рдо рдХрд┐рд╕реА рднреА рдЙрджреНрджреЗрд╢реНрдп рдХреЗ рд▓рд┐рдП рдбреЗрдЯрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдирд╣реАрдВ рдХрд░рддреЗред рдРрдк рдкреВрд░реА рддрд░рд╣ рд╕реЗ рдСрдлрд▓рд╛рдЗрди рдФрд░ рдЖрдкрдХреЗ рдбрд┐рд╡рд╛рдЗрд╕ рдкрд░ рд╕реНрдерд╛рдиреАрдп рд░реВрдк рд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред',
        section3Title: 'рдбреЗрдЯрд╛ рд╕рдВрдЧреНрд░рд╣рдг',
        section3Text: 'рдХреЛрдИ рднреА рдкреНрд░рд╛рдердорд┐рдХрддрд╛, рд╕реЗрдЯрд┐рдВрдЧ, рдпрд╛ рдЧреЗрдо рдЖрдВрдХрдбрд╝реЗ рдЖрдкрдХреЗ рдбрд┐рд╡рд╛рдЗрд╕ рдкрд░ рд╕реБрд░рдХреНрд╖рд┐рдд рд╕реНрдерд╛рдиреАрдп рд╕рдВрдЧреНрд░рд╣рдг рд╡рд┐рдзрд┐рдпреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╕реНрдерд╛рдиреАрдп рд░реВрдк рд╕реЗ рд╕рдВрдЧреНрд░рд╣реАрдд рдХрд┐рдП рдЬрд╛рддреЗ рд╣реИрдВред рдпрд╣ рдбреЗрдЯрд╛ рдирд┐рдЬреА рд░рд╣рддрд╛ рд╣реИ рдФрд░ рдЖрдкрдХреЗ рдирд┐рдпрдВрддреНрд░рдг рдореЗрдВ рд░рд╣рддрд╛ рд╣реИред',
        section4Title: 'рддреГрддреАрдп рдкрдХреНрд╖ рд╕реЗрд╡рд╛рдПрдВ',
        section4Text: 'рд╣рдорд╛рд░рд╛ рдРрдк рдХрд┐рд╕реА рднреА рддреГрддреАрдп рдкрдХреНрд╖ рд╕реЗрд╡рд╛рдУрдВ, рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо, рдпрд╛ рд╡рд┐рдЬреНрдЮрд╛рдкрди рдиреЗрдЯрд╡рд░реНрдХ рдХреЗ рд╕рд╛рде рдПрдХреАрдХреГрдд рдирд╣реАрдВ рд╣реЛрддрд╛ рдЬреЛ рдЖрдкрдХреА рдЬрд╛рдирдХрд╛рд░реА рдХреЛ рдПрдХрддреНрд░ рдпрд╛ рдЯреНрд░реИрдХ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред',
        section5Title: 'рдмрдЪреНрдЪреЛрдВ рдХреА рдЧреЛрдкрдиреАрдпрддрд╛',
        section5Text: 'рд╣рдорд╛рд░рд╛ рдРрдк рд╕рднреА рдЙрдореНрд░ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╣реИ рдФрд░ 13 рд╡рд░реНрд╖ рд╕реЗ рдХрдо рдпрд╛ рдХрд┐рд╕реА рдЕрдиреНрдп рдЖрдпреБ рд╕рдореВрд╣ рдХреЗ рдмрдЪреНрдЪреЛрдВ рд╕реЗ рдЬрд╛рдирдмреВрдЭрдХрд░ рдХреЛрдИ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА рдПрдХрддреНрд░ рдирд╣реАрдВ рдХрд░рддрд╛ред',
        section6Title: 'рдЗрд╕ рдиреАрддрд┐ рдореЗрдВ рдкрд░рд┐рд╡рд░реНрддрди',
        section6Text: 'рд╣рдо рд╕рдордп-рд╕рдордп рдкрд░ рдЗрд╕ рдЧреЛрдкрдиреАрдпрддрд╛ рдиреАрддрд┐ рдХреЛ рдЕрдкрдбреЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдХреЛрдИ рднреА рдкрд░рд┐рд╡рд░реНрддрди рдРрдк рдореЗрдВ рдкреНрд░рддрд┐рдмрд┐рдВрдмрд┐рдд рд╣реЛрдЧрд╛ рдФрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЕрдкрдбреЗрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реВрдЪрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред',
        section7Title: 'рд╣рдорд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ',
        section7Text: 'рдпрджрд┐ рдЖрдкрдХреЛ рдЗрд╕ рдЧреЛрдкрдиреАрдпрддрд╛ рдиреАрддрд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреЛрдИ рдкреНрд░рд╢реНрди рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рдРрдк рд╕реНрдЯреЛрд░ рдпрд╛ рд╣рдорд╛рд░реЗ рд╕рд╣рд╛рдпрддрд╛ рдЪреИрдирд▓реЛрдВ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╣рдорд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред',
        lastUpdated: 'рдЕрдВрддрд┐рдо рдЕрдкрдбреЗрдЯ: рджрд┐рд╕рдВрдмрд░ 2024',
        privacyBadge: 'ЁЯФТ 100% рдирд┐рдЬреА',
        offlineBadge: 'ЁЯУ▒ рдСрдлрд▓рд╛рдЗрди рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ',
        localBadge: 'ЁЯТ╛ рдХреЗрд╡рд▓ рд╕реНрдерд╛рдиреАрдп рд╕рдВрдЧреНрд░рд╣рдг'
      }
    };
    return translations[language as keyof typeof translations]?.[key as keyof typeof translations.en] || key;
  };

  const renderSection = (title: string, text: string, icon: string) => (
    <View style={styles.section}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionIcon}>{icon}</Text>
        <Text style={styles.sectionTitle}>{title}</Text>
      </View>
      <Text style={styles.text}>{text}</Text>
    </View>
  );

  const renderBadge = (text: string, color: string) => (
    <View style={[styles.badge, { backgroundColor: color }]}>
      <Text style={styles.badgeText}>{text}</Text>
    </View>
  );
  
  return (
    <SafeAreaView style={styles.container}>
      <ScrollView 
        style={styles.scrollView} 
        contentContainerStyle={[styles.scrollContent, { paddingBottom: insets.bottom + 100 }]}
        showsVerticalScrollIndicator={false}
      >
        {/* Header Section */}
        <LinearGradient
          colors={[COLORS.primary, COLORS.primaryDark]}
          style={styles.headerGradient}
        >
          <View style={styles.headerContent}>
            <View style={styles.titleContainer}>
              <Ionicons name="shield-checkmark" size={32} color="white" />
              <Text style={styles.title}>{t('title')}</Text>
            </View>
            <Text style={styles.subtitle}>{t('subtitle')}</Text>
            
            {/* Privacy Badges */}
            <View style={styles.badgesContainer}>
              {renderBadge(t('privacyBadge'), 'rgba(255, 255, 255, 0.2)')}
              {renderBadge(t('offlineBadge'), 'rgba(255, 255, 255, 0.2)')}
              {renderBadge(t('localBadge'), 'rgba(255, 255, 255, 0.2)')}
            </View>
          </View>
        </LinearGradient>

        {/* Content Sections */}
        <View style={styles.content}>
          {renderSection(t('section1Title'), t('section1Text'), 'ЁЯУК')}
          {renderSection(t('section2Title'), t('section2Text'), 'ЁЯФН')}
          {renderSection(t('section3Title'), t('section3Text'), 'ЁЯТ╛')}
          {renderSection(t('section4Title'), t('section4Text'), 'ЁЯЪл')}
          {renderSection(t('section5Title'), t('section5Text'), 'ЁЯС╢')}
          {renderSection(t('section6Title'), t('section6Text'), 'ЁЯУЭ')}
          {renderSection(t('section7Title'), t('section7Text'), 'ЁЯУЮ')}
          
          <View style={styles.lastUpdatedContainer}>
            <Text style={styles.lastUpdated}>{t('lastUpdated')}</Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
  },
  headerGradient: {
   
    paddingBottom: 20,
    paddingHorizontal: 20,
  },
  headerContent: {
    alignItems: 'center',
  },
  titleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  title: {
    ...TYPOGRAPHY.h1,
    color: 'white',
    marginLeft: 12,
    fontWeight: 'bold',
  },
  subtitle: {
    ...TYPOGRAPHY.body,
    color: 'rgba(255, 255, 255, 0.9)',
    textAlign: 'center',
    marginBottom: 15,
  },
  badgesContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    gap: 10,
  },
  badge: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.3)',
  },
  badgeText: {
    ...TYPOGRAPHY.caption,
    color: 'white',
    fontWeight: '600',
  },
  content: {
    padding: 20,
    paddingTop: 10,
  },
  section: {
    marginBottom: 20,
    backgroundColor: 'white',
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  sectionIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  sectionTitle: {
    ...TYPOGRAPHY.h3,
    color: COLORS.text,
    flex: 1,
    fontWeight: '600',
  },
  text: {
    ...TYPOGRAPHY.body,
    color: COLORS.textSecondary,
    lineHeight: 24,
  },
  lastUpdatedContainer: {
    alignItems: 'center',
    marginTop: 20,
    paddingTop: 20,
    borderTopWidth: 1,
    borderTopColor: COLORS.border,
  },
  lastUpdated: {
    ...TYPOGRAPHY.caption,
    color: COLORS.textLight,
    fontStyle: 'italic',
    textAlign: 'center',
  },
});

export default PrivacyScreen; 